
         * Consider:

         * 1. what you need the collection to do
         * 2. are you using the fastest collection for your purposes
         * (think about insertion/deletion, retrieval and traversal


        //////////////// LISTS ///////////////////////////////////

        1. Store lists of objects
        2. Duplicates are allowed
        3. Objects remain in order
        4. Elements are indexed via an integer
        5. cf. shopping list
        6. Checking for particular item in list is slow
        7. Looking an item up by index is fast
        8. Iterating through lists is relatively fast
        9. Note: you can sort lists if you want to.

        // If you only add or remove items at end of list, use ArrayList.

        List<String> list1 = new ArrayList<String>();

        // Removing or adding items elsewhere in the list?

        List<String> list2 = new LinkedList<String>();


        ////////////////SETS ///////////////////////////////////

        1. Only store unique values
        2. Great for removing duplicates
        3. Not indexed, unlike lists
        4. Very fast to check if a particular object exists
        5. If you want to use your own objects, you must implement hashCode() and equals().

        // Order is unimportant and OK if it changes?

         HashSet is not ordered.
        Set<String> set1 = new HashSet<String>();

        // Sorted in natural order? Use TreeSet - must implement Comparable for custom types
           (1,2,3 ..., a,b,c.... etc)

        Set<String> set2 = new TreeSet<String>();

        // Elements remain in order they were added

        Set<String> set3 = new LinkedHashSet<String>();

        ////////////////MAPS ///////////////////////////////////

        1. Key value pairs.
        2. Like lookup tables.
        3. Retrieving a value by key is fast.
        4. Iterating over map values is very slow.
        5. Maps not really optimised for iteration.
        6. If you want to use your own objects as keys, you must implement hashCode() and equals().

        // Keys not in any particular order, and order liable to change.

        Map<String, String> map1 = new HashMap<String, String>();

        // Keys sorted in natural order - must implement Comparable for custom types

        Map<String, String> map2 = new TreeMap<String, String>();

        // Keys remain in order added

        Map<String, String> map3 = new LinkedHashMap<String, String>();

        <<< There are also the SortedSet and SortedMap interfaces. >>>


